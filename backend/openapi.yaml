openapi: 3.0.3
info:
  version: "1"
  title: TourPlanner
  description: TODO
servers:
  - url: http://localhost:42069
tags:
  - name: tours
  - name: logs
  
paths:
  /tours:
    post:
      summary: Creates a new tour
      description: Creates a new tour with the associated data
      tags:
        - tours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tour'
        required: true
      responses:
        '201':
          description: Tour successfully created
    get:
      summary: Returns all tours
      description: Returns a list of all tours and basic parameters
      tags:
        - tours
      responses:
        '200':
          description: Data retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tour'
        '204':
          description: No tours exist
  
  /tours/{tour_id}:
    put:
      summary: Modifies the specified tour
      description: Changes the tour associated with the give tour-id to match the new data
      tags:
        - tours
      parameters:
        - in: path
          name: tour_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Tour modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tour'
        '404':
          description: Tour does not exist
      
    delete:
      summary: Deletes the specified tour
      description: Deletes the tour and all log entries associated with the given tour-id
      tags:
        - tours
      parameters:
        - in: path
          name: tour_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Tour deleted
        '404':
          description: Tour does not exist
  
  /tours/{tour_id}/logs:
    get:
      summary: Returns all logs of specified tour
      description: Returns a list containing all logs associated with the given tour-id
      tags:
        - logs
      parameters:
        - in: path
          name: tour_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Data retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/tour_log'
        '204':
          description: Tour has no logs
    post:
      summary: Creates a new logs for specified tour
      description: Creates a new tour log to add to the tour associated with the given tour-id
      tags:
        - logs
      parameters:
        - in: path
          name: tour_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '201':
          description: Log creates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tour_log'
        '404':
          description: Tour does not exist
          
  /logs/{log_id}:
    put:
      summary: Modifies the specified log entry
      description: Changes the log entry associated with the give log-id to match the new data
      tags:
        - logs
      parameters:
        - in: path
          name: log_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Log entry modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tour_log'
        '404':
          description: Log entry does not exist
      
    delete:
      summary: Deletes the specified log entry
      description: Deletes the log entry associated with the given log-id
      tags:
        - logs
      parameters:
        - in: path
          name: log_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Log entry deleted
        '404':
          description: Log entry does not exist
          
  /tours/{tour_id}/image:
    get:
      summary: Returns a visual representation of a tour
      description: "Returns an image visually describing the tour, generated by -TODO: openstreetmap or openrouteservice-"
      tags:
        - tours
      parameters:
        - in: path
          name: tour_id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '200':
          description: Image retrieved creates
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Tour does not exist

components:
  schemas:
    tour:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
          nullable: true
        start:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
            format: float
          description: latitude and longitude in decimal degrees
          example: [48.23928, 16.37732]
        end:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
            format: float
          description: latitude and longitude in decimal degrees
          example: [48.23928, 16.37732]
        type:
          type: string
          enum: [walk, bike, pogo-stick]
        distance:
          type: integer
          description: in meters
          readOnly: true
        time:
          type: integer
          description: in minutes
          readOnly: true
    tour_log:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        timestamp:
          type: string
          format: date-time
        comment:
          type: string
          nullable: true
        difficulty:
          type: integer
          description: on a scale from 0 to 5
          minimum: 0
          maximum: 5
        distance:
          type: integer
          description: in meters
          minimum: 0
        time:
          type: integer
          description: in minutes
          minimum: 0
        rating:
          type: integer
          description: on a scale from 0 to 5
          minimum: 0
          maximum: 5
        outdated:
          type: boolean
          description: true if the mode, or start or end point of the tour was modified after log entry was created
